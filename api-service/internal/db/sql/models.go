// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Status string

const (
	StatusQUEUE    Status = "QUEUE"
	StatusPROGRESS Status = "PROGRESS"
	StatusREADY    Status = "READY"
	StatusFAIL     Status = "FAIL"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status `json:"status"`
	Valid  bool   `json:"valid"` // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type Deployment struct {
	ID        int64       `json:"id"`
	ProjectID pgtype.Int8 `json:"project_id"`
	Status    NullStatus  `json:"status"`
}

type Project struct {
	ID           int64              `json:"id"`
	CreatedBy    pgtype.Int4        `json:"created_by"`
	Name         string             `json:"name"`
	GithubUrl    string             `json:"github_url"`
	Subdomain    pgtype.Text        `json:"subdomain"`
	CustomDomain pgtype.Text        `json:"custom_domain"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

type RefreshToken struct {
	ID     uuid.UUID          `json:"id"`
	Token  string             `json:"token"`
	UserID int32              `json:"user_id"`
	Expiry pgtype.Timestamptz `json:"expiry"`
}

type User struct {
	ID       int32       `json:"id"`
	GithubID int32       `json:"github_id"`
	Username string      `json:"username"`
	Name     pgtype.Text `json:"name"`
	Email    string      `json:"email"`
	Avatar   pgtype.Text `json:"avatar"`
}
