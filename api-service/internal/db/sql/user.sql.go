// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" ("github_id", "name", "username", "email", "avatar")
VALUES ($1, $2, $3, $4, $5)
RETURNING id, github_id, username, name, email, avatar
`

type CreateUserParams struct {
	GithubID int32       `json:"github_id"`
	Name     pgtype.Text `json:"name"`
	Username string      `json:"username"`
	Email    string      `json:"email"`
	Avatar   pgtype.Text `json:"avatar"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.GithubID,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Avatar,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Avatar,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, github_id, username, name, email, avatar from "user" 
WHERE "id" = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Avatar,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE "user"
SET
    "github_id" = COALESCE($1, "github_id"),
    "name" = COALESCE($2, "name"),
    "avatar" = COALESCE($3, "avatar"),
    "email" = COALESCE($4, "email"),
    "username" = COALESCE($5, "username")
WHERE "id" = $6
RETURNING id, github_id, username, name, email, avatar
`

type UpdateParams struct {
	GithubID pgtype.Int4 `json:"github_id"`
	Name     pgtype.Text `json:"name"`
	Avatar   pgtype.Text `json:"avatar"`
	Email    pgtype.Text `json:"email"`
	Username pgtype.Text `json:"username"`
	ID       int32       `json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (User, error) {
	row := q.db.QueryRow(ctx, update,
		arg.GithubID,
		arg.Name,
		arg.Avatar,
		arg.Email,
		arg.Username,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Avatar,
	)
	return i, err
}
