// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: projects.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO
    "projects" (
        "created_by",
        "name",
        "github_url",
        "subdomain",
        "custom_domain"
    )
VALUES
    ($1, $2, $3, $4, $5) RETURNING id, created_by, name, github_url, subdomain, custom_domain, created_at
`

type CreateProjectParams struct {
	CreatedBy    pgtype.Int4 `json:"created_by"`
	Name         string      `json:"name"`
	GithubUrl    string      `json:"github_url"`
	Subdomain    pgtype.Text `json:"subdomain"`
	CustomDomain pgtype.Text `json:"custom_domain"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.CreatedBy,
		arg.Name,
		arg.GithubUrl,
		arg.Subdomain,
		arg.CustomDomain,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.Name,
		&i.GithubUrl,
		&i.Subdomain,
		&i.CustomDomain,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProjects = `-- name: DeleteProjects :exec
DELETE FROM "projects"
WHERE id = $1
`

func (q *Queries) DeleteProjects(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProjects, id)
	return err
}

const getProjectById = `-- name: GetProjectById :one
SELECT id, created_by, name, github_url, subdomain, custom_domain, created_at FROM "projects"
WHERE "id" = $1
`

func (q *Queries) GetProjectById(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectById, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.Name,
		&i.GithubUrl,
		&i.Subdomain,
		&i.CustomDomain,
		&i.CreatedAt,
	)
	return i, err
}

const getProjects = `-- name: GetProjects :one
SELECT id, created_by, name, github_url, subdomain, custom_domain, created_at FROM "projects"
WHERE "created_by" = $1
`

func (q *Queries) GetProjects(ctx context.Context, createdBy pgtype.Int4) (Project, error) {
	row := q.db.QueryRow(ctx, getProjects, createdBy)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.Name,
		&i.GithubUrl,
		&i.Subdomain,
		&i.CustomDomain,
		&i.CreatedAt,
	)
	return i, err
}

const updateProjects = `-- name: UpdateProjects :one
UPDATE "projects"
SET
"name" = COALESCE($1, "name"),
"custom_domain" = COALESCE($2, "custom_domain")
WHERE "id" = $3
RETURNING "id", "created_by", "name", "github_url", "subdomain", "custom_domain", "created_at"
`

type UpdateProjectsParams struct {
	Name         pgtype.Text `json:"name"`
	CustomDomain pgtype.Text `json:"custom_domain"`
	ID           int64       `json:"id"`
}

func (q *Queries) UpdateProjects(ctx context.Context, arg UpdateProjectsParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProjects, arg.Name, arg.CustomDomain, arg.ID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.Name,
		&i.GithubUrl,
		&i.Subdomain,
		&i.CustomDomain,
		&i.CreatedAt,
	)
	return i, err
}
